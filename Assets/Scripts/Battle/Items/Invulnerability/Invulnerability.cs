using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Invulnerability : MonoBehaviour
{
    
    float curEffectTime = 0;
    float intervalTime = 0.4f; // 효과 간격
    bool effectXor = false; //효과 반전 체크
    [HideInInspector]
    public float CurEffectTime;
    [HideInInspector]
    public GameObject BuffEffect;
    [HideInInspector]
    public Color originColor;

    private void OnEnable()
    {
        GetComponent<Status>().Imunity=true;
        if(BuffEffect!=null)
        { BuffEffect.SetActive(true);}
        CurEffectTime = 0.1f;
    }

    // Update is called once per frame
    void Update()
    {
        CurEffectTime -= Time.deltaTime;

        UpdateImmunityState();
    }
    public void UpdateImmunityState()
    {
        if (CurEffectTime < 3)
        {
            if (!effectXor && curEffectTime<intervalTime) //사라짐
            {
                BuffEffect.GetComponent<SpriteRenderer>().color = new Color(originColor.r, originColor.g, originColor.b, (1 - (curEffectTime / intervalTime))*originColor.a);
            }
            else if (effectXor && curEffectTime < intervalTime) //나타남
            {
                BuffEffect.GetComponent<SpriteRenderer>().color = new Color(originColor.r, originColor.g, originColor.b, ((curEffectTime / intervalTime)) * originColor.a);
            }
            else
            {
                effectXor ^= true; //효과 반전
                curEffectTime = 0;
            }
            curEffectTime += Time.deltaTime;
        } //깜빡임 효과 추가
        else BuffEffect.GetComponent<SpriteRenderer>().color = originColor; //초기 색 세팅값으로 되돌려놓기

        if (CurEffectTime <= 0)
        {
            GetComponent<Status>().Imunity = false;
            BuffEffect.SetActive(false);
            BuffEffect.GetComponent<SpriteRenderer>().color = originColor; //초기 색 세팅값으로 되돌려놓기
            this.enabled = false;
        }
    }
}
